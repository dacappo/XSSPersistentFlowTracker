<?php

require "database.php";
	$firstOrderFlow = json_decode($_POST["first"]);
	$secondOrderFlow = json_decode($_POST["second"]);

	function stringifyArray($ar) {
		return ("[" . implode(", ", $ar) . "]");
	}

	function traceFirstOrderFlow($dbh, $vulID) {
		global $firstOrderFlow;

		$traceFirOrderFlow = $dbh->prepare('INSERT INTO FirstOrderFlowsVulnerable (`ID`, `Sink`, `Method`, `Origin`, `Url`, `Script`, `Data`, `TaintArray`, `Key`, `Value`) VALUES(:id, :sink, :method, :origin, :url, :script, :data, :taint, :key, :value)');
		$traceFirOrderFlow->bindParam(':id', $vulID);
		$traceFirOrderFlow->bindParam(':sink', $firstOrderFlow->{"sink"});
		$traceFirOrderFlow->bindParam(':method', $firstOrderFlow->{"method"});
		$traceFirOrderFlow->bindParam(':url', $firstOrderFlow->{"url"});
		$traceFirOrderFlow->bindParam(':origin', $firstOrderFlow->{"origin"});
		$traceFirOrderFlow->bindParam(':script', $firstOrderFlow->{"script"});
		$traceFirOrderFlow->bindParam(':data', $firstOrderFlow->{"data"});
		$traceFirOrderFlow->bindParam(':taint', stringifyArray($firstOrderFlow->{"taintArray"}));
		$traceFirOrderFlow->bindParam(':key', $firstOrderFlow->{"key"});
		$traceFirOrderFlow->bindParam(':value', $firstOrderFlow->{"value"});

		if($traceFirOrderFlow->execute()) {
			logDatabase ("Query ran successfully: " . $traceFirOrderFlow->queryString . "");
		} else {
			logDatabase ("Error running query: " . array_pop($traceFirOrderFlow->errorInfo()) . " : " . $traceFirOrderFlow->queryString );
		}
	}

	function traceSecondOrderFlowSources($dbh, $vulID) {
		global $secondOrderFlow;

		foreach ($secondOrderFlow->{"sources"} AS $source) {
			$traceSecOrderFlowSources = $dbh->prepare('INSERT INTO SecondOrderFlowSourcesVulnerable (`FlowID`, `Source`, `Key`, `Value`) VALUES(:flowId, :source, :key, :value)');
			$traceSecOrderFlowSources->bindParam(':flowId', $vulID);
			$traceSecOrderFlowSources->bindParam(':source', $source->{"method"});
			$traceSecOrderFlowSources->bindParam(':key', $source->{"key"});
			$traceSecOrderFlowSources->bindParam(':value', $source->{"value"});

			if($traceSecOrderFlowSources->execute()) {
				logDatabase ("Query ran successfully: " . $traceSecOrderFlowSources->queryString . "");
			} else {
				logDatabase ("Error running query: " . array_pop($traceSecOrderFlowSources->errorInfo()) . " : " . $traceSecOrderFlowSources->queryString );
			}
		}
	}

	function traceSecondOrderFlow($dbh, $vulID) {
		global $secondOrderFlow;

		$traceSecOrderFlow = $dbh->prepare('INSERT INTO SecondOrderFlowsVulnerable (`ID`, `Sink`, `Origin`, `Url`, `Script`, `Data`, `TaintArray`) VALUES(:id, :sink, :origin, :url, :script, :data, :taint)');
		$traceSecOrderFlow->bindParam(':id', $vulID);
		$traceSecOrderFlow->bindParam(':sink', $secondOrderFlow->{"sink"});
		$traceSecOrderFlow->bindParam(':url', $secondOrderFlow->{"url"});
		$traceSecOrderFlow->bindParam(':origin', $secondOrderFlow->{"origin"});
		$traceSecOrderFlow->bindParam(':script', $secondOrderFlow->{"script"});
		$traceSecOrderFlow->bindParam(':data', $secondOrderFlow->{"data"});
		$traceSecOrderFlow->bindParam(':taint', stringifyArray($secondOrderFlow->{"taintArray"}));

		if($traceSecOrderFlow->execute()) {
			logDatabase ("Query ran successfully: " . $traceSecOrderFlow->queryString . "");
		} else {
			logDatabase ("Error running query: " . array_pop($traceSecOrderFlow->errorInfo()) . " : " . $traceSecOrderFlow->queryString );
		}

		traceSecondOrderFlowSources($dbh, $vulID);
	}

	function writeDataSet() {

		$vulID = uniqid();

		$config = json_decode(file_get_contents("../config.json"));
		$db_config = $config->{"database"};

		/* Set up database connection and tables */
		$dbh = connectToDatabase($db_config->{"host"}, $db_config->{"port"} , $db_config->{"user"}, $db_config->{"password"}, $db_config->{"schema"});
		initializeDatabase($dbh);

		
		traceFirstOrderFlow($dbh, $vulID);
		traceSecondOrderFlow($dbh, $vulID);
		
	}

	/* Write to database */
	writeDataSet();

	/* Allow access on script - cross origin domain */
	header('Access-Control-Allow-Origin', '*');
	header('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');
	header('Content-type: application/json');
	header('Cache-Control: no-cahe, must-revalidate');